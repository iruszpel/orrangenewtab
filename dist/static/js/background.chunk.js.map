{"version":3,"file":"static/js/background.chunk.js","sources":["/home/ignacy/Dokumenty/chrome-extension-react/src/BackgroundPage.js","/home/ignacy/Dokumenty/chrome-extension-react/src/background.js","/home/ignacy/Dokumenty/chrome-extension-react/src/db.js","/home/ignacy/Dokumenty/chrome-extension-react/src/serviceWorker.js","/home/ignacy/Dokumenty/chrome-extension-react/ignored /home/ignacy/Dokumenty/chrome-extension-react/node_modules/readable-stream/lib util","/home/ignacy/Dokumenty/chrome-extension-react/ignored /home/ignacy/Dokumenty/chrome-extension-react/node_modules/readable-stream/lib/internal/streams util","/home/ignacy/Dokumenty/chrome-extension-react/ignored /home/ignacy/Dokumenty/chrome-extension-react/node_modules/bn.js/lib buffer","/home/ignacy/Dokumenty/chrome-extension-react/ignored /home/ignacy/Dokumenty/chrome-extension-react/node_modules/brorand crypto","/home/ignacy/Dokumenty/chrome-extension-react/ignored /home/ignacy/Dokumenty/chrome-extension-react/node_modules/tweetnacl crypto"],"sourcesContent":["\n'use strict';\nimport React, { Component } from 'react';\nimport db from './db';\nimport wunderlist from 'wunderlist-api'\nclass Wunderlist {\n    getAllLists = () => {\n        wunderlist.getLists().then(response => {\n            this.getTasksFromList(response)\n        })\n    }\n    getTasksFromList = (lists) => {\n        for (let list of lists) {\n            wunderlist.getTasks(list.id).then(tasks => {\n                for (let task of tasks) {\n                    db.tasks.put(task)\n                }\n            })\n        }\n    }\n    get Tasks() {\n        const wunderlist = new Wunderlist({\n            clientId: process.env.REACT_APP_WUNDERLIST_CLIENTID,\n            accessToken: localStorage.getItem(\"tokenWunderlist\")\n        })\n    }\n}\nclass Todoist {\n    get Tasks() {\n\n    }\n}\nclass Asana {\n    get Tasks() {\n\n    }\n}\nclass Trello {\n    get Tasks() {\n\n    }\n}\nclass GCal {\n    get Events() {\n\n    }\n}\nclass Gmail {\n    get Mails() {\n\n    }\n}\nclass GitHub {\n    get Tasks() {\n\n    }\n}\nclass Background extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            tasks: []\n        };\n    }\n\n    componentDidMount() {\n        let wunder = new Wunderlist();\n        wunder.Tasks();\n\n\n    }\n    render() {\n        return (\n            <div>\n\n            </div>\n        );\n    }\n}\n\nexport default Background;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport Background from './BackgroundPage'\n\nReactDOM.render(\n    <Background>\n    </Background>\n    , document.getElementById('rootBackground'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import Dexie from 'dexie';\n\nconst db = new Dexie('OrrangeDB');\ndb.version(1).stores({\n    tasks: 'id, title, date, source, list_id, revision',\n    mails: 'id, title, from, labelIds, date, unread',\n    calendarEvents: 'id, date, value'\n});\n\nexport default db;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */"],"mappings":";;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;AAAA;AACA;AACA;AACA;AAAA;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;;;;;AACA;AACA;AACA;AACA;AAFA;AAIA;;;;;;AAEA;;;;;;;;;AACA;;;;;;AAIA;;;;;;;;;AACA;;;;;;AAIA;;;;;;;;;AACA;;;;;;AAIA;;;;;;;;;AACA;;;;;;AAIA;;;;;;;;;AACA;;;;;;AAIA;;;;;;;;;AACA;;;;;;AAIA;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AADA;AAFA;AAKA;AACA;;;AACA;AACA;AACA;AAGA;;;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;AArBA;AACA;AAuBA;;;;;;;;;;;;;;;;;;;;ACjFA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAAA;;;;;;;;;;;;ACbA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;;;;;;;;;;;;ACTA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AAEA;AAKA;AACA,+BA8BA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACtIA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}